{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.uri = 'http://localhost:8080/users';\n  }\n  login(username, password) {\n    const data = {\n      username: username,\n      password: password\n    };\n    return this.http.post(`${this.uri}/login`, data);\n  }\n  getUser(username) {\n    return this.http.post(`${this.uri}/getUser`, username);\n  }\n  register(username, password, question, answer, type, firstname, lastname, gender, address, contact, email, image, typeOfSchool, currentGrade) {\n    const data = {\n      username: username,\n      password: password,\n      question: question,\n      answer: answer,\n      type: type,\n      firstname: firstname,\n      lastname: lastname,\n      gender: gender,\n      address: address,\n      contact: contact,\n      email: email,\n      image: image,\n      typeOfSchool: typeOfSchool,\n      currentGrade: currentGrade\n    };\n    return this.http.post(`${this.uri}/addUser`, data);\n  }\n  changePassword(username, password) {\n    const data = {\n      username: username,\n      password: password\n    };\n    return this.http.post(`${this.uri}/changePassword`, data);\n  }\n  checkSecurityQuestion(username, answer) {\n    const data = {\n      username: username,\n      answer: answer\n    };\n    return this.http.post(`${this.uri}/checkSecurityQuestion`, data);\n  }\n  update(username, type, firstname, lastname, address, contact, email, typeOfSchool, currentGrade) {\n    const data = {\n      username: username,\n      type: type,\n      firstname: firstname,\n      lastname: lastname,\n      address: address,\n      contact: contact,\n      email: email,\n      typeOfSchool: typeOfSchool,\n      currentGrade: currentGrade\n    };\n    return this.http.post(`${this.uri}/updateUser`, data);\n  }\n  updateImage(username, image) {\n    const data = {\n      username: username,\n      image: image\n    };\n    return this.http.post(`${this.uri}/updateImage`, data);\n  }\n  getStudentCount() {\n    return this.http.get(`${this.uri}/getStudentCount`);\n  }\n  getApprovedTutors() {\n    return this.http.get(`${this.uri}/getApprovedTutors`);\n  }\n  getStudentsForTutor(tutor) {\n    return this.http.post(`${this.uri}/getStudentsForTutor`, tutor);\n  }\n  getAllStudents() {\n    return this.http.get(`${this.uri}/getAllStudents`);\n  }\n  getNonApprovedTutors() {\n    return this.http.get(`${this.uri}/getNonApprovedTutors`);\n  }\n  removeTutor(username) {\n    return this.http.post(`${this.uri}/removeTutor`, username);\n  }\n  getGenderCount() {\n    return this.http.get(`${this.uri}/getGenderCount`);\n  }\n  getAllPasswords() {}\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["UserService","constructor","http","uri","login","username","password","data","post","getUser","register","question","answer","type","firstname","lastname","gender","address","contact","email","image","typeOfSchool","currentGrade","changePassword","checkSecurityQuestion","update","updateImage","getStudentCount","get","getApprovedTutors","getStudentsForTutor","tutor","getAllStudents","getNonApprovedTutors","removeTutor","getGenderCount","getAllPasswords","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Faks\\7. semestar\\PIA\\PIA 2023\\Moj projekat\\frontend\\frontend\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { User } from '../models/User';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http:HttpClient) { }\n\n  uri = 'http://localhost:8080/users';\n\n  login(username: string, password: string) {\n    const data = {\n      username : username,\n      password : password\n    }\n    return this.http.post<User>(`${this.uri}/login`, data);\n  }\n\n  getUser(username: string) {\n    return this.http.post<User>(`${this.uri}/getUser`, username);\n  }\n\n  register(username: string, password: string, question: string, answer: string, type: string, firstname: string, lastname: string, \n    gender: string, address: string, contact: string, email: string, image: string, typeOfSchool: string, currentGrade: number) {\n      const data = {\n        username: username,\n        password: password,\n        question: question,\n        answer: answer,\n        type: type,\n        firstname: firstname,\n        lastname: lastname,\n        gender: gender,\n        address: address,\n        contact: contact,\n        email: email,\n        image: image,\n        typeOfSchool: typeOfSchool,\n        currentGrade: currentGrade,\n      }\n      return this.http.post<number>(`${this.uri}/addUser`, data);\n  }\n\n  changePassword(username: string, password: string) {\n    const data = {\n      username : username,\n      password : password\n    }\n    return this.http.post<number>(`${this.uri}/changePassword`, data);\n  }\n\n  checkSecurityQuestion(username: string, answer: string) {\n    const data = {\n      username : username,\n      answer : answer\n    }\n    return this.http.post<boolean>(`${this.uri}/checkSecurityQuestion`, data);\n  }\n\n  update(username: string, type: string, firstname: string, lastname: string, address: string, contact: string, email: string, typeOfSchool: string, currentGrade: number) {\n      const data = {\n        username: username,\n        type: type,\n        firstname: firstname,\n        lastname: lastname,\n        address: address,\n        contact: contact,\n        email: email,\n        typeOfSchool: typeOfSchool,\n        currentGrade: currentGrade,\n      }\n      return this.http.post<number>(`${this.uri}/updateUser`, data);\n  }\n\n  updateImage(username: string, image: string) {\n    const data = {\n      username : username,\n      image : image\n    }\n    return this.http.post<number>(`${this.uri}/updateImage`, data);\n  }\n\n  getStudentCount() {\n    return this.http.get<number>(`${this.uri}/getStudentCount`);\n  }\n\n  getApprovedTutors() {\n    return this.http.get<User[]>(`${this.uri}/getApprovedTutors`);\n  }\n\n  getStudentsForTutor(tutor: string) {\n    return this.http.post<User[]>(`${this.uri}/getStudentsForTutor`, tutor);\n  }\n\n  getAllStudents() {\n    return this.http.get<User[]>(`${this.uri}/getAllStudents`);\n  }\n\n  getNonApprovedTutors() {\n    return this.http.get<User[]>(`${this.uri}/getNonApprovedTutors`);\n  }\n\n  removeTutor(username: string) {\n    return this.http.post<number>(`${this.uri}/removeTutor`, username);\n  }\n\n  getGenderCount() {\n    return this.http.get<number[]>(`${this.uri}/getGenderCount`);\n  }\n\n  getAllPasswords() {\n\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}