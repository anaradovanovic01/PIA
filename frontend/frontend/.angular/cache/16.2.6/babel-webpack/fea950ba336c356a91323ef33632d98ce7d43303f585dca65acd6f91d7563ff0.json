{"ast":null,"code":"import { User } from '../models/User';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.uri = 'http://localhost:8080/users';\n  }\n  login(username, password) {\n    const data = {\n      username: username,\n      password: password\n    };\n    return this.http.post(`${this.uri}/login`, data);\n  }\n  logout() {\n    localStorage.clear();\n  }\n  getUser(username) {\n    return this.http.post(`${this.uri}/getUser`, {\n      username: username\n    });\n  }\n  register(username, password, type, firstname, lastname, gender, address, email, formData, typeOfSchool, currentGrade) {\n    /*\n    formData.append('username', username);\n    formData.append('password', password);\n    formData.append('type', type);\n    formData.append('firstname', firstname);\n    formData.append('lastname', lastname);\n    formData.append('gender', gender);\n    formData.append('email', email);\n    formData.append('address', address);\n    formData.append('typeOfSchool', typeOfSchool);\n    formData.append('currentGrade', String(currentGrade));\n    */\n    let u = new User();\n    u.username = username;\n    u.password = password;\n    u.type = type;\n    u.firstname = firstname;\n    u.lastname = lastname;\n    u.gender = gender;\n    u.address = address;\n    u.email = email;\n    u.typeOfSchool = typeOfSchool;\n    u.currentGrade = currentGrade;\n    formData.append(\"user\", JSON.stringify(u));\n    return this.http.post(`${this.uri}/addUser`, formData);\n  }\n  changePassword(username, password) {\n    const data = {\n      username: username,\n      password: password\n    };\n    return this.http.post(`${this.uri}/changePassword`, data);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["User","UserService","constructor","http","uri","login","username","password","data","post","logout","localStorage","clear","getUser","register","type","firstname","lastname","gender","address","email","formData","typeOfSchool","currentGrade","u","append","JSON","stringify","changePassword","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Faks\\7. semestar\\PIA\\PIA 2023\\Moj projekat\\frontend\\frontend\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { User } from '../models/User';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http:HttpClient) { }\n\n  uri = 'http://localhost:8080/users';\n\n  login(username: string, password: string) {\n    const data = {\n      username : username,\n      password : password\n    }\n    return this.http.post<User>(`${this.uri}/login`, data);\n  }\n\n  logout() {\n    localStorage.clear();\n  }\n\n  getUser(username: string) {\n    return this.http.post<User>(`${this.uri}/getUser`, {username: username});\n  }\n\n  register(username: string, password: string, type: string, firstname: string, lastname: string, gender: string, address: string,\n    email: string, formData: FormData, typeOfSchool: string, currentGrade: number) {\n      /*\n      formData.append('username', username);\n      formData.append('password', password);\n      formData.append('type', type);\n      formData.append('firstname', firstname);\n      formData.append('lastname', lastname);\n      formData.append('gender', gender);\n      formData.append('email', email);\n      formData.append('address', address);\n      formData.append('typeOfSchool', typeOfSchool);\n      formData.append('currentGrade', String(currentGrade));\n*/\n      let u: User = new User();\n      u.username = username;\n      u.password = password;\n      u.type = type;\n      u.firstname = firstname;\n      u.lastname = lastname;\n      u.gender = gender;\n      u.address = address;\n      u.email = email;\n      u.typeOfSchool = typeOfSchool;\n      u.currentGrade = currentGrade;\n      formData.append(\"user\", JSON.stringify(u));\n      return this.http.post<number>(`${this.uri}/addUser`, formData);\n  }\n\n  changePassword(username: string, password: string) {\n    const data = {\n      username : username,\n      password : password\n    }\n    return this.http.post<number>(`${this.uri}/changePassword`, data);\n  }\n\n}\n"],"mappings":"AAEA,SAASA,IAAI,QAAQ,gBAAgB;;;AAKrC,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IAExB,KAAAC,GAAG,GAAG,6BAA6B;EAFI;EAIvCC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,MAAMC,IAAI,GAAG;MACXF,QAAQ,EAAGA,QAAQ;MACnBC,QAAQ,EAAGA;KACZ;IACD,OAAO,IAAI,CAACJ,IAAI,CAACM,IAAI,CAAO,GAAG,IAAI,CAACL,GAAG,QAAQ,EAAEI,IAAI,CAAC;EACxD;EAEAE,MAAMA,CAAA;IACJC,YAAY,CAACC,KAAK,EAAE;EACtB;EAEAC,OAAOA,CAACP,QAAgB;IACtB,OAAO,IAAI,CAACH,IAAI,CAACM,IAAI,CAAO,GAAG,IAAI,CAACL,GAAG,UAAU,EAAE;MAACE,QAAQ,EAAEA;IAAQ,CAAC,CAAC;EAC1E;EAEAQ,QAAQA,CAACR,QAAgB,EAAEC,QAAgB,EAAEQ,IAAY,EAAEC,SAAiB,EAAEC,QAAgB,EAAEC,MAAc,EAAEC,OAAe,EAC7HC,KAAa,EAAEC,QAAkB,EAAEC,YAAoB,EAAEC,YAAoB;IAC3E;;;;;;;;;;;;IAYA,IAAIC,CAAC,GAAS,IAAIxB,IAAI,EAAE;IACxBwB,CAAC,CAAClB,QAAQ,GAAGA,QAAQ;IACrBkB,CAAC,CAACjB,QAAQ,GAAGA,QAAQ;IACrBiB,CAAC,CAACT,IAAI,GAAGA,IAAI;IACbS,CAAC,CAACR,SAAS,GAAGA,SAAS;IACvBQ,CAAC,CAACP,QAAQ,GAAGA,QAAQ;IACrBO,CAAC,CAACN,MAAM,GAAGA,MAAM;IACjBM,CAAC,CAACL,OAAO,GAAGA,OAAO;IACnBK,CAAC,CAACJ,KAAK,GAAGA,KAAK;IACfI,CAAC,CAACF,YAAY,GAAGA,YAAY;IAC7BE,CAAC,CAACD,YAAY,GAAGA,YAAY;IAC7BF,QAAQ,CAACI,MAAM,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACH,CAAC,CAAC,CAAC;IAC1C,OAAO,IAAI,CAACrB,IAAI,CAACM,IAAI,CAAS,GAAG,IAAI,CAACL,GAAG,UAAU,EAAEiB,QAAQ,CAAC;EAClE;EAEAO,cAAcA,CAACtB,QAAgB,EAAEC,QAAgB;IAC/C,MAAMC,IAAI,GAAG;MACXF,QAAQ,EAAGA,QAAQ;MACnBC,QAAQ,EAAGA;KACZ;IACD,OAAO,IAAI,CAACJ,IAAI,CAACM,IAAI,CAAS,GAAG,IAAI,CAACL,GAAG,iBAAiB,EAAEI,IAAI,CAAC;EACnE;EAAC,QAAAqB,CAAA,G;qBAzDU5B,WAAW,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXjC,WAAW;IAAAkC,OAAA,EAAXlC,WAAW,CAAAmC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}