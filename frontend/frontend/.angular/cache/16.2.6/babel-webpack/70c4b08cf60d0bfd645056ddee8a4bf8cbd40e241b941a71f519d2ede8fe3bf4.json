{"ast":null,"code":"import { animationFrameScheduler, BehaviorSubject, combineLatest, switchMap, map, interval, takeWhile, endWith, distinctUntilChanged, takeUntil } from 'rxjs';\nimport { Destroy } from './destroy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./destroy\";\n/**\n * Quadratic Ease-Out Function: f(x) = x * (2 - x)\n */\nconst easeOutQuad = x => x * (2 - x);\nexport class CountUpDirective {\n  set count(count) {\n    this.count$.next(count);\n  }\n  set duration(duration) {\n    this.duration$.next(duration);\n  }\n  constructor(elementRef, renderer, destroy$) {\n    this.elementRef = elementRef;\n    this.renderer = renderer;\n    this.destroy$ = destroy$;\n    this.count$ = new BehaviorSubject(0);\n    this.duration$ = new BehaviorSubject(2000);\n    this.currentCount$ = combineLatest([this.count$, this.duration$]).pipe(switchMap(([count, duration]) => {\n      // get the time when animation is triggered\n      const startTime = animationFrameScheduler.now();\n      return interval(0, animationFrameScheduler).pipe(\n      // calculate elapsed time\n      map(() => animationFrameScheduler.now() - startTime),\n      // calculate progress\n      map(elapsedTime => elapsedTime / duration),\n      // complete when progress is greater than 1\n      takeWhile(progress => progress <= 1),\n      // apply quadratic ease-out\n      // for faster start and slower end of counting\n      map(easeOutQuad),\n      // calculate current count\n      map(progress => Math.round(progress * count)),\n      // make sure that last emitted value is count\n      endWith(count), distinctUntilChanged());\n    }));\n  }\n  ngOnInit() {\n    this.displayCurrentCount();\n  }\n  displayCurrentCount() {\n    this.currentCount$.pipe(takeUntil(this.destroy$)).subscribe(currentCount => {\n      this.renderer.setProperty(this.elementRef.nativeElement, 'innerHTML', currentCount);\n    });\n  }\n  static #_ = this.ɵfac = function CountUpDirective_Factory(t) {\n    return new (t || CountUpDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.Destroy));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: CountUpDirective,\n    selectors: [[\"\", \"countUp\", \"\"]],\n    inputs: {\n      count: [\"countUp\", \"count\"],\n      duration: \"duration\"\n    },\n    features: [i0.ɵɵProvidersFeature([Destroy])]\n  });\n}","map":{"version":3,"names":["animationFrameScheduler","BehaviorSubject","combineLatest","switchMap","map","interval","takeWhile","endWith","distinctUntilChanged","takeUntil","Destroy","easeOutQuad","x","CountUpDirective","count","count$","next","duration","duration$","constructor","elementRef","renderer","destroy$","currentCount$","pipe","startTime","now","elapsedTime","progress","Math","round","ngOnInit","displayCurrentCount","subscribe","currentCount","setProperty","nativeElement","_","i0","ɵɵdirectiveInject","ElementRef","Renderer2","i1","_2","selectors","inputs","features","ɵɵProvidersFeature"],"sources":["D:\\Faks\\7. semestar\\PIA\\PIA 2023\\Moj projekat\\frontend\\frontend\\src\\app\\about\\count-up.directive.ts"],"sourcesContent":["import { Directive, ElementRef, Input, OnInit, Renderer2 } from '@angular/core';\r\nimport {\r\n  animationFrameScheduler,\r\n  BehaviorSubject,\r\n  combineLatest,\r\n  switchMap,\r\n  map,\r\n  interval,\r\n  takeWhile,\r\n  endWith,\r\n  distinctUntilChanged,\r\n  takeUntil,\r\n} from 'rxjs';\r\nimport { Destroy } from './destroy';\r\n\r\n/**\r\n * Quadratic Ease-Out Function: f(x) = x * (2 - x)\r\n */\r\nconst easeOutQuad = (x: number): number => x * (2 - x);\r\n\r\n@Directive({\r\n  selector: '[countUp]',\r\n  providers: [Destroy],\r\n})\r\nexport class CountUpDirective implements OnInit {\r\n  private readonly count$ = new BehaviorSubject(0);\r\n  private readonly duration$ = new BehaviorSubject(2000);\r\n\r\n  private readonly currentCount$ = combineLatest([\r\n    this.count$,\r\n    this.duration$,\r\n  ]).pipe(\r\n    switchMap(([count, duration]) => {\r\n      // get the time when animation is triggered\r\n      const startTime = animationFrameScheduler.now();\r\n\r\n      return interval(0, animationFrameScheduler).pipe(\r\n        // calculate elapsed time\r\n        map(() => animationFrameScheduler.now() - startTime),\r\n        // calculate progress\r\n        map((elapsedTime) => elapsedTime / duration),\r\n        // complete when progress is greater than 1\r\n        takeWhile((progress) => progress <= 1),\r\n        // apply quadratic ease-out\r\n        // for faster start and slower end of counting\r\n        map(easeOutQuad),\r\n        // calculate current count\r\n        map((progress) => Math.round(progress * count)),\r\n        // make sure that last emitted value is count\r\n        endWith(count),\r\n        distinctUntilChanged()\r\n      );\r\n    })\r\n  );\r\n\r\n  @Input('countUp')\r\n  set count(count: number) {\r\n    this.count$.next(count);\r\n  }\r\n\r\n  @Input()\r\n  set duration(duration: number) {\r\n    this.duration$.next(duration);\r\n  }\r\n\r\n  constructor(\r\n    private readonly elementRef: ElementRef,\r\n    private readonly renderer: Renderer2,\r\n    private readonly destroy$: Destroy\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.displayCurrentCount();\r\n  }\r\n\r\n  private displayCurrentCount(): void {\r\n    this.currentCount$\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe((currentCount) => {\r\n        this.renderer.setProperty(\r\n          this.elementRef.nativeElement,\r\n          'innerHTML',\r\n          currentCount\r\n        );\r\n      });\r\n  }\r\n}\r\n"],"mappings":"AACA,SACEA,uBAAuB,EACvBC,eAAe,EACfC,aAAa,EACbC,SAAS,EACTC,GAAG,EACHC,QAAQ,EACRC,SAAS,EACTC,OAAO,EACPC,oBAAoB,EACpBC,SAAS,QACJ,MAAM;AACb,SAASC,OAAO,QAAQ,WAAW;;;AAEnC;;;AAGA,MAAMC,WAAW,GAAIC,CAAS,IAAaA,CAAC,IAAI,CAAC,GAAGA,CAAC,CAAC;AAMtD,OAAM,MAAOC,gBAAgB;EA+B3B,IACIC,KAAKA,CAACA,KAAa;IACrB,IAAI,CAACC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC;EACzB;EAEA,IACIG,QAAQA,CAACA,QAAgB;IAC3B,IAAI,CAACC,SAAS,CAACF,IAAI,CAACC,QAAQ,CAAC;EAC/B;EAEAE,YACmBC,UAAsB,EACtBC,QAAmB,EACnBC,QAAiB;IAFjB,KAAAF,UAAU,GAAVA,UAAU;IACV,KAAAC,QAAQ,GAARA,QAAQ;IACR,KAAAC,QAAQ,GAARA,QAAQ;IA3CV,KAAAP,MAAM,GAAG,IAAId,eAAe,CAAC,CAAC,CAAC;IAC/B,KAAAiB,SAAS,GAAG,IAAIjB,eAAe,CAAC,IAAI,CAAC;IAErC,KAAAsB,aAAa,GAAGrB,aAAa,CAAC,CAC7C,IAAI,CAACa,MAAM,EACX,IAAI,CAACG,SAAS,CACf,CAAC,CAACM,IAAI,CACLrB,SAAS,CAAC,CAAC,CAACW,KAAK,EAAEG,QAAQ,CAAC,KAAI;MAC9B;MACA,MAAMQ,SAAS,GAAGzB,uBAAuB,CAAC0B,GAAG,EAAE;MAE/C,OAAOrB,QAAQ,CAAC,CAAC,EAAEL,uBAAuB,CAAC,CAACwB,IAAI;MAC9C;MACApB,GAAG,CAAC,MAAMJ,uBAAuB,CAAC0B,GAAG,EAAE,GAAGD,SAAS,CAAC;MACpD;MACArB,GAAG,CAAEuB,WAAW,IAAKA,WAAW,GAAGV,QAAQ,CAAC;MAC5C;MACAX,SAAS,CAAEsB,QAAQ,IAAKA,QAAQ,IAAI,CAAC,CAAC;MACtC;MACA;MACAxB,GAAG,CAACO,WAAW,CAAC;MAChB;MACAP,GAAG,CAAEwB,QAAQ,IAAKC,IAAI,CAACC,KAAK,CAACF,QAAQ,GAAGd,KAAK,CAAC,CAAC;MAC/C;MACAP,OAAO,CAACO,KAAK,CAAC,EACdN,oBAAoB,EAAE,CACvB;IACH,CAAC,CAAC,CACH;EAgBE;EAEHuB,QAAQA,CAAA;IACN,IAAI,CAACC,mBAAmB,EAAE;EAC5B;EAEQA,mBAAmBA,CAAA;IACzB,IAAI,CAACT,aAAa,CACfC,IAAI,CAACf,SAAS,CAAC,IAAI,CAACa,QAAQ,CAAC,CAAC,CAC9BW,SAAS,CAAEC,YAAY,IAAI;MAC1B,IAAI,CAACb,QAAQ,CAACc,WAAW,CACvB,IAAI,CAACf,UAAU,CAACgB,aAAa,EAC7B,WAAW,EACXF,YAAY,CACb;IACH,CAAC,CAAC;EACN;EAAC,QAAAG,CAAA,G;qBA7DUxB,gBAAgB,EAAAyB,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA,GAAAF,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAG,SAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAhC,OAAA;EAAA;EAAA,QAAAiC,EAAA,G;UAAhB9B,gBAAgB;IAAA+B,SAAA;IAAAC,MAAA;MAAA/B,KAAA;MAAAG,QAAA;IAAA;IAAA6B,QAAA,GAAAR,EAAA,CAAAS,kBAAA,CAFhB,CAACrC,OAAO,CAAC;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}