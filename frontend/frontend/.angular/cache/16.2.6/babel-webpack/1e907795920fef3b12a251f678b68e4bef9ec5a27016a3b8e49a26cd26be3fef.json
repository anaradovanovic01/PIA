{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FileService {\n  constructor(http) {\n    this.http = http;\n    this.uri = 'http://localhost:8080/files';\n  }\n  uploadFile(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    return this.http.post(`${this.uri}/uploadFile`, formData, {\n      responseType: 'text'\n    });\n  }\n  getImageFile(path) {\n    return this.http.get(path, {\n      responseType: 'arraybuffer'\n    }).pipe(map(data => {\n      const blob = new Blob([data], {\n        type: 'image/png'\n      });\n      const fileName = path.substring(path.lastIndexOf('/') + 1);\n      const file = new File([blob], fileName, {\n        type: 'image/png'\n      });\n      return file;\n    }));\n  }\n  fetchPdf(filename) {\n    return this.http.post(`${this.uri}/download`, filename, {\n      responseType: 'blob'\n    });\n  }\n  static #_ = this.ɵfac = function FileService_Factory(t) {\n    return new (t || FileService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FileService,\n    factory: FileService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","FileService","constructor","http","uri","uploadFile","file","formData","FormData","append","post","responseType","getImageFile","path","get","pipe","data","blob","Blob","type","fileName","substring","lastIndexOf","File","fetchPdf","filename","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Faks\\7. semestar\\PIA\\PIA 2023\\Moj projekat\\frontend\\frontend\\src\\app\\services\\file.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FileService {\n\n  constructor(private http:HttpClient) { }\n\n  uri = 'http://localhost:8080/files';\n\n  uploadFile(file: File) {\n    const formData: FormData = new FormData();\n    formData.append('file', file);\n    return this.http.post<string>(`${this.uri}/uploadFile`, formData, {responseType: 'text' as 'json'} );\n  }\n\n  getImageFile(path: string): Observable<File> {\n    return this.http.get(path, { responseType: 'arraybuffer' }).pipe(\n        map((data: ArrayBuffer) => {\n          const blob = new Blob([data], { type: 'image/png' });\n          const fileName = path.substring(path.lastIndexOf('/') + 1);\n          const file: File = new File([blob], fileName, { type: 'image/png' });\n          return file;\n        })\n      );\n  }\n\n  fetchPdf(filename: string): Observable<Blob> {\n    return this.http.post(`${this.uri}/download`, filename, { responseType: 'blob' });\n  }\n}\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IAExB,KAAAC,GAAG,GAAG,6BAA6B;EAFI;EAIvCC,UAAUA,CAACC,IAAU;IACnB,MAAMC,QAAQ,GAAa,IAAIC,QAAQ,EAAE;IACzCD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAC7B,OAAO,IAAI,CAACH,IAAI,CAACO,IAAI,CAAS,GAAG,IAAI,CAACN,GAAG,aAAa,EAAEG,QAAQ,EAAE;MAACI,YAAY,EAAE;IAAgB,CAAC,CAAE;EACtG;EAEAC,YAAYA,CAACC,IAAY;IACvB,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAACD,IAAI,EAAE;MAAEF,YAAY,EAAE;IAAa,CAAE,CAAC,CAACI,IAAI,CAC5Df,GAAG,CAAEgB,IAAiB,IAAI;MACxB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACF,IAAI,CAAC,EAAE;QAAEG,IAAI,EAAE;MAAW,CAAE,CAAC;MACpD,MAAMC,QAAQ,GAAGP,IAAI,CAACQ,SAAS,CAACR,IAAI,CAACS,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MAC1D,MAAMhB,IAAI,GAAS,IAAIiB,IAAI,CAAC,CAACN,IAAI,CAAC,EAAEG,QAAQ,EAAE;QAAED,IAAI,EAAE;MAAW,CAAE,CAAC;MACpE,OAAOb,IAAI;IACb,CAAC,CAAC,CACH;EACL;EAEAkB,QAAQA,CAACC,QAAgB;IACvB,OAAO,IAAI,CAACtB,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACN,GAAG,WAAW,EAAEqB,QAAQ,EAAE;MAAEd,YAAY,EAAE;IAAM,CAAE,CAAC;EACnF;EAAC,QAAAe,CAAA,G;qBAzBUzB,WAAW,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX9B,WAAW;IAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}