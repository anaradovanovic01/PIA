{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { User } from '../models/User';\nexport let SecurityQuestionComponent = class SecurityQuestionComponent {\n  constructor(service, router) {\n    this.service = service;\n    this.router = router;\n    this.loggedIn = false;\n    this.user = new User();\n    this.question = \"\";\n    this.answer = \"\";\n    this.new = \"\";\n    this.confirm = \"\";\n    this.message = \"\";\n  }\n  ngOnInit() {\n    let item = localStorage.getItem('loggedIn');\n    if (item) this.user = JSON.parse(item);\n    if (this.user.username == \"\") this.loggedIn = false;else this.loggedIn = true;\n    item = localStorage.getItem(\"question\");\n    if (item) this.user = JSON.parse(item);\n    this.question = this.user.question;\n  }\n  save() {\n    if (this.answer == \"\" || this.new == \"\" || this.confirm == \"\") {\n      this.message = \"Please fill out all fields before continuing.\";\n      return;\n    }\n    this.service.checkSecurityQuestion(this.user.username, this.answer).subscribe(user => {\n      if (!user) {\n        this.message = 'You did not answer the security question correctly!';\n      } else {\n        if (this.new !== this.confirm) {\n          this.message = \"The new password and the cofirmed password do not match!\";\n        } else {\n          this.service.changePassword(this.user.username, this.new).subscribe(resp => {\n            if (resp > 0) {\n              this.message = '';\n              alert(\"You have successfully changed the password.\");\n              this.router.navigate(['login']);\n            } else this.message = \"Error\";\n          });\n        }\n      }\n    });\n  }\n};\nSecurityQuestionComponent = __decorate([Component({\n  selector: 'app-security-question',\n  templateUrl: './security-question.component.html',\n  styleUrls: ['./security-question.component.css']\n})], SecurityQuestionComponent);","map":{"version":3,"names":["Component","User","SecurityQuestionComponent","constructor","service","router","loggedIn","user","question","answer","new","confirm","message","ngOnInit","item","localStorage","getItem","JSON","parse","username","save","checkSecurityQuestion","subscribe","changePassword","resp","alert","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Faks\\7. semestar\\PIA\\PIA 2023\\Moj projekat\\frontend\\frontend\\src\\app\\security-question\\security-question.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { UserService } from '../services/user.service';\nimport { AppComponent } from '../app.component';\nimport { User } from '../models/User';\n\n@Component({\n  selector: 'app-security-question',\n  templateUrl: './security-question.component.html',\n  styleUrls: ['./security-question.component.css']\n})\nexport class SecurityQuestionComponent {\n  constructor(private service: UserService, public router: Router) { }\n\n  ngOnInit() {\n    let item = localStorage.getItem('loggedIn')\n    if(item) this.user = JSON.parse(item);\n    if(this.user.username == \"\") this.loggedIn = false;\n    else this.loggedIn = true;\n    item = localStorage.getItem(\"question\");\n    if(item) this.user = JSON.parse(item);\n    this.question = this.user.question;\n  }\n\n  loggedIn: boolean = false;\n  user: User = new User();\n  question: string = \"\";\n  answer: string = \"\";\n  new: string = \"\";\n  confirm: string = \"\";\n  message: string = \"\";\n\n  save() {\n    if(this.answer == \"\" || this.new == \"\" || this.confirm == \"\") {\n      this.message = \"Please fill out all fields before continuing.\"; \n      return;\n    }\n    this.service.checkSecurityQuestion(this.user.username, this.answer).subscribe((user: boolean)=>{\n      if(!user) {\n        this.message = 'You did not answer the security question correctly!';\n      } else {\n        if(this.new !== this.confirm) {\n          this.message = \"The new password and the cofirmed password do not match!\"\n        }\n        else {\n          this.service.changePassword(this.user.username, this.new).subscribe(resp=>{\n            if (resp>0) {\n              this.message = '';\n              alert(\"You have successfully changed the password.\")\n              this.router.navigate(['login']);\n            }\n            else \n              this.message = \"Error\";\n          })\n        }\n      }\n    })\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAGzC,SAASC,IAAI,QAAQ,gBAAgB;AAO9B,WAAMC,yBAAyB,GAA/B,MAAMA,yBAAyB;EACpCC,YAAoBC,OAAoB,EAASC,MAAc;IAA3C,KAAAD,OAAO,GAAPA,OAAO;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAYvD,KAAAC,QAAQ,GAAY,KAAK;IACzB,KAAAC,IAAI,GAAS,IAAIN,IAAI,EAAE;IACvB,KAAAO,QAAQ,GAAW,EAAE;IACrB,KAAAC,MAAM,GAAW,EAAE;IACnB,KAAAC,GAAG,GAAW,EAAE;IAChB,KAAAC,OAAO,GAAW,EAAE;IACpB,KAAAC,OAAO,GAAW,EAAE;EAlB+C;EAEnEC,QAAQA,CAAA;IACN,IAAIC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAC3C,IAAGF,IAAI,EAAE,IAAI,CAACP,IAAI,GAAGU,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC;IACrC,IAAG,IAAI,CAACP,IAAI,CAACY,QAAQ,IAAI,EAAE,EAAE,IAAI,CAACb,QAAQ,GAAG,KAAK,CAAC,KAC9C,IAAI,CAACA,QAAQ,GAAG,IAAI;IACzBQ,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACvC,IAAGF,IAAI,EAAE,IAAI,CAACP,IAAI,GAAGU,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC;IACrC,IAAI,CAACN,QAAQ,GAAG,IAAI,CAACD,IAAI,CAACC,QAAQ;EACpC;EAUAY,IAAIA,CAAA;IACF,IAAG,IAAI,CAACX,MAAM,IAAI,EAAE,IAAI,IAAI,CAACC,GAAG,IAAI,EAAE,IAAI,IAAI,CAACC,OAAO,IAAI,EAAE,EAAE;MAC5D,IAAI,CAACC,OAAO,GAAG,+CAA+C;MAC9D;;IAEF,IAAI,CAACR,OAAO,CAACiB,qBAAqB,CAAC,IAAI,CAACd,IAAI,CAACY,QAAQ,EAAE,IAAI,CAACV,MAAM,CAAC,CAACa,SAAS,CAAEf,IAAa,IAAG;MAC7F,IAAG,CAACA,IAAI,EAAE;QACR,IAAI,CAACK,OAAO,GAAG,qDAAqD;OACrE,MAAM;QACL,IAAG,IAAI,CAACF,GAAG,KAAK,IAAI,CAACC,OAAO,EAAE;UAC5B,IAAI,CAACC,OAAO,GAAG,0DAA0D;SAC1E,MACI;UACH,IAAI,CAACR,OAAO,CAACmB,cAAc,CAAC,IAAI,CAAChB,IAAI,CAACY,QAAQ,EAAE,IAAI,CAACT,GAAG,CAAC,CAACY,SAAS,CAACE,IAAI,IAAE;YACxE,IAAIA,IAAI,GAAC,CAAC,EAAE;cACV,IAAI,CAACZ,OAAO,GAAG,EAAE;cACjBa,KAAK,CAAC,6CAA6C,CAAC;cACpD,IAAI,CAACpB,MAAM,CAACqB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;aAChC,MAEC,IAAI,CAACd,OAAO,GAAG,OAAO;UAC1B,CAAC,CAAC;;;IAGR,CAAC,CAAC;EACJ;CACD;AA/CYV,yBAAyB,GAAAyB,UAAA,EALrC3B,SAAS,CAAC;EACT4B,QAAQ,EAAE,uBAAuB;EACjCC,WAAW,EAAE,oCAAoC;EACjDC,SAAS,EAAE,CAAC,mCAAmC;CAChD,CAAC,C,EACW5B,yBAAyB,CA+CrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}